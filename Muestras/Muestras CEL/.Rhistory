BiocManager::install("ExperimentHub")
library(ExperimentHub)
columns(hub)
#BiocManager::install("ExperimentHub")
library(ExperimentHub)
columns(hub)
BiocManager::install("AnnotationHub")
library(AnnotationHub)
#BiocManager::install("AnnotationHub")
library(AnnotationHub)
hub <- subset(AnnotationHub(), species == "Mus musculus")
hub
hub <- AnnotationHub()["AH73905"]
hub
#BiocManager::install("ExperimentHub")
library(ExperimentHub)
columns(hub)
columns(hub)
matrix <- "C:/Users/silvi/Downloads/GSM4556600_MF002_human_cleanraw_counts_matrix.txt"
matrix
data <- read.table(matrix, header = TRUE, sep = "\t")
matrix <- "C:/Users/silvi/Downloads/GSM4556600_MF002_human_cleanraw_counts_matrix.txt/GSM4556600_MF002_human_cleanraw_counts_matrix.txt"
data <- read.table(matrix, header = TRUE, sep = "\t")
data <- read.table(matrix, header = TRUE, sep = "\t")
data
View(data)
View(data)
data1 <- read.table(C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Human Prostate Benigne I - GSM4556600)
data2 <- read.table(C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Human Prostate Benigne II - GSM4556601)
data1 <- read.table(C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Human Prostate Benigne I - GSM4556600, header = TRUE, sep = "\t")
data2 <- read.table(C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Human Prostate Benigne II - GSM4556601, header = TRUE, sep = "\t")
data1 <- read.table("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Human Prostate Benigne I - GSM4556600", header = TRUE, sep = "\t")
data2 <- read.table("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Human Prostate Benigne II - GSM4556601", header = TRUE, sep = "\t")
load("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Human Prostate Benigne I - GSM4556600.txt")
data1 <- read.table("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Human Prostate Benigne I - GSM4556600", header = TRUE, sep = "\t")
data1 <- read.table("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Human Prostate Benigne I - GSM4556600.txt", header = TRUE, sep = "\t")
data2 <- read.table("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Human Prostate Benigne II - GSM4556601.txt", header = TRUE, sep = "\t")
View(data1)
View(data1)
View(data2)
View(data2)
data3 <- read.table("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Human Prostate Benigne III - GSM4556602.txt", header = TRUE, sep = "\t")
View(data3)
View(data3)
View(data1)
View(data1)
View(data2)
View(data2)
View(data1)
View(data1)
sce_416b <- LunSpikeInData(which = "416b")
sce_416b
#BiocManager::install("scRNAseq")
library(scRNAseq)
sce_416b <- LunSpikeInData(which = "416b")
sce_416b <- LunSpikeInData(which = "416b")
sce_416b
View(sce_416b)
View(sce_416b)
sce_416b$block <- factor(sce_416b$block)
#BiocManager::install("AnnotationHub")
library(AnnotationHub)
hub <- subset(AnnotationHub(), species == "Mus musculus")
hub <- subset(AnnotationHub(), species == "Mus musculus")
hub
hub <- AnnotationHub()["AH73905"]
hub
hub <- AnnotationHub()["AH73905"]
hub <- AnnotationHub()["AH73905"]
hub
columns(hub)
#BiocManager::install("ExperimentHub")
library(ExperimentHub)
#BiocManager::install("biomaRt")
library(biomaRt)
columns(hub)
View(hub)
View(hub)
View(sce_416b)
View(sce_416b)
head(rownames(sce_416b))
map_seqname <- mapIds(hub,
keys = rownames(sce_416b),
keytype = "GENEID",
column = "SEQNAME")
# Numero de genes por localizacion cromosomica
table(map_seqname)
View(data1)
View(data1)
# Ruta completa del archivo .gz
ruta_archivo <- "Descargas/GSE117403_D17_FACS_filtered_barcodes.tsv.gz"
# Leer el contenido del archivo .gz
con <- gzfile(ruta_archivo, "rt")  # Abre el archivo .gz en modo lectura de texto
contenido <- readLines(con)  # Lee el contenido del archivo
# Cerrar la conexión al archivo
close(con)
# Mostrar las primeras líneas (o todo el contenido)
head(contenido)
# Ruta completa del archivo .gz
ruta_archivo <- "Descargas/GSE117403_D17_FACS_filtered_barcodes.tsv.gz"
# Leer el contenido del archivo .gz
con <- gzfile(ruta_archivo, "rt")  # Abre el archivo .gz en modo lectura de texto
# Leer el contenido del archivo .gz
con <- gzfile(ruta_archivo, "rt")  # Abre el archivo .gz en modo lectura de texto
# Ruta completa del archivo .gz
ruta_archivo <- "Descargas/GSE117403_D17_FACS_filtered_barcodes.tsv.gz"
# Directorio donde se extraerán los archivos
directorio_destino <- "Descargas/Descomprimido_GSE117403_D17"
# Descomprimir el archivo .gz
untar(ruta_archivo, exdir = directorio_destino)
# Cargar las librerías necesarias
library(Matrix)
library(readr)
install.packages("Matrix")
install.packages("readr")
# Cargar las librerías necesarias
library(Matrix)
library(readr)
# Rutas a los archivos
ruta_mtx <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Prostate Benigne/Matrix/GSE117403-matrix-D17.mtx"
ruta_genes <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Prostate Benigne/Matrix/GSE117403-genes-D17.tsv"
# Cargar la matriz .mtx
matriz_mtx <- readMM(ruta_mtx)
# Cargar la matriz .mtx
matriz_mtx <- readMM(C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Prostate Benigne/Matrix/GSE117403-matrix-D17.mtx)
# Cargar la matriz .mtx
matriz_mtx <- readMM("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Prostate Benigne/Matrix/GSE117403-matrix-D17.mtx")
# Cargar la matriz .mtx
matriz_mtx <- readMM("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Prostate Benigne/Matrix/GSE117403-matrix-D17.mtx")
# Cargar el archivo de genes
genes <- read_tsv(ruta_genes, col_names = FALSE, col_types = cols())
# Rutas a los archivos
ruta_mtx <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Prostate Benigne/MatrixMarket + Genes/GSE117403-matrix-D17.mtx"
ruta_genes <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Prostate Benigne/MatrixMarket + Genes/GSE117403-genes-D17.tsv"
# Cargar la matriz .mtx
matriz_mtx <- readMM(ruta_mtx)
# Cargar el archivo de genes
genes <- read_tsv(ruta_genes, col_names = FALSE, col_types = cols())
# Convertir la matriz a un formato denso (DataFrame)
matriz_df <- as.data.frame(as.matrix(matriz_mtx))
# Asignar nombres de genes a las filas
rownames(matriz_df) <- genes$X2
View(matriz_df)
View(matriz_df)
# Asignar nombres de genes a las filas
rownames(matriz_df) <- genes$X2
duplicated_genes <- genes$X2[duplicated(genes$X2)]
# Generar sufijos únicos para los genes duplicados
suffixes <- ave(seq_along(duplicated_genes), duplicated_genes, FUN = seq_along)
# Agregar sufijos únicos a los nombres de genes duplicados
genes$X2[duplicated_genes] <- paste0(duplicated_genes, "_", suffixes)
# Agregar sufijos únicos a los nombres de genes duplicados
genes$X2[duplicated_genes] <- paste0(duplicated_genes, "_", suffixes)
# Asignar los nombres de genes a las filas de la matriz
rownames(matriz_df) <- genes$X2
library(Matrix)
library(data.table)
# Definir la ruta de los archivos
dir_path <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Samples/Prostate Cancer/High Grade"
# Leer la matriz en formato Matrix Market
mtx_file <- file.path(dir_path, "GSM6133925_S9.counts.mtx")
mtx <- readMM(mtx_file)
# Leer los archivos de genes y barcodes
genes_file <- file.path(dir_path, "GSM6133925_S9.genes")
genes <- fread(genes_file, header = FALSE)
barcodes_file <- file.path(dir_path, "GSM6133925_S9.barcode")
barcodes <- fread(barcodes_file, header = FALSE)
# Asignar nombres de filas y columnas a la matriz
rownames(mtx) <- genes$V1
colnames(mtx) <- barcodes$V1
# Convertir a matriz densa (opcional)
dense_mtx <- as.matrix(mtx)
View(dense_mtx)
View(dense_mtx)
ela <- file_path <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.xlsx"
ela <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.xlsx"
ela <- read_excel("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.xlsx")
library(readxl)
ela <- read_excel("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.xlsx")
library(readxl)
ela <- read_excel(C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.xlsx)
library(readxl)
ela <- read_excel(C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.xlsx)
ruta <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.xlsx"
ruta <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.xlsx"
ela <- read_excel(ruta)
ruta <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers"
ela <- read_excel(ruta)
ruta <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers"
ela <- read_excel(ruta)
ruta <- "C://Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers"
ela <- read_excel(ruta)
ELA <- read_excel("C://Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.csv")
ELA <- read_excel("C://Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.csv")
ELA <- read_excel("C://Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.csv")
ELA <- read.csv("C://Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.csv")
View(ELA)
ela$survival_36m <- ela$months_survived >= 36
ELA$survival_36m <- ELA$months_survived >= 36
survival_rate <- mean(ELA$survival_36m) * 100
ELA$survival_36m <- ELA$months_survived >= 36
survival_rate <- mean(ELA$survival_36m) * 100
survival_rate
ELAsurvival <- (ELA$survival_36m == TRUE / ELA$survival_36m) * 100
ELAsurvival
survival_rate <- mean(ELA$survival_36m) * 100
survival_rate
ELAsurvival <- (count(ELA$survival_36m == TRUE) / count(ELA$survival_36m)) * 100
ELAsurvival <- (count(ELA$survival_36m == TRUE) / count(ELA$survival_36m)) * 100
ELAsurvival <- (sum(ELA$survival_36m == TRUE) / sum(ELA$survival_36m)) * 100
ELAsurvival
survival_rate <- mean(ELA$survival_36m) * 100
survival_rate
survival <- ELA$months_survived >= 36 / count(ELA$months_survived) *100
survival <- sum(ELA$months_survived >= 36) / sum(ELA$months_survived) *100
survival
ELA$survival_36m <- ELA$months_survived >= 36
survival_rate <- mean(ELA$survival_36m) * 100
survival <- sum(ELA$months_survived) / sum(ELA$months_survived >= 36) *100
survival
ELA$survival_36m <- ELA$months_survived >= 36
survival_rate <- mean(ELA$survival_36m) * 100
ELA <- read.csv("C://Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/ela_allBiomarkers.csv")
View(ELA)
View(ELA)
sup_36 <- df[ELA$months_survived >= 36, ]
sup_36 <- sum(ELA$months_survived >= 36)
# Calcular el porcentaje sobre el total de la columna
por_sup_36 <- (nrow(sup_36) / nrow(ELA$months_survived)) * 100
sup_36 <- sum(ELA$months_survived >= 36)
# Calcular el porcentaje sobre el total de la columna
por_sup_36 <- (nrow(sup_36) / nrow(ELA$months_survived)) * 100
por_sup_36
sup_36 <- nrow(ELA$months_survived >= 36)
# Calcular el porcentaje sobre el total de la columna
por_sup_36 <- (nrow(sup_36) / nrow(ELA$months_survived)) * 100
por_sup_36
sup_36 <- nrow(ELA$months_survived >= 36)
# Calcular el porcentaje sobre el total de la columna
por_sup_36 <- (nrow(sup_36) / nrow(ELA$months_survived)) * 100
por_sup_36
sup_36 <- nrow(ELA$months_survived >= 36)
# Calcular el porcentaje sobre el total de la columna
por_sup_36 <- (sup_36) / nrow(ELA$months_survived)) * 100
personas_con_36_o_mas <- sum(ELA$months_survived >= 36)
# Calcular el total de personas en el dataset
total_personas <- nrow(ELA)
# Calcular el porcentaje
porcentaje <- (personas_con_36_o_mas / total_personas) * 100
# Mostrar el resultado
print(porcentaje)
personas_con_36_o_mas <- sum(ELA$months_survived >= 36)
total_personas <- nrow(ELA)
porcentaje <- (personas_con_36_o_mas / total_personas) * 100
porcentaje
View(ELA)
View(ELA)
#Convertimos sexo y onset en factores:
datos$sexo <- as.factor(datos$sexo)
#Convertimos sexo y onset en factores:
ELA$sex <- as.factor(ELA$sex)
ELA$onset <- as.factor(ELA$onset)
View(ELA)
View(ELA)
ELA_reg_log <- as.formula("months_survived >= 36 ~ edad + sexo + IMC_baseline + onset + NfL_baseline + CRP_baseline + IL6_baseline")
reg_log <- glmnet(as.formula("months_survived >= 36 ~ edad + sexo + IMC_baseline + onset + NfL_baseline + CRP_baseline + IL6_baseline"), data = ELA, family = "binomial")
library(glmnet)
install.packages("glmnet")
library(glmnet)
reg_log <- glmnet(as.formula("months_survived >= 36 ~ edad + sexo + IMC_baseline + onset + NfL_baseline + CRP_baseline + IL6_baseline"), data = ELA, family = "binomial")
library(glmnet)
reg_log <- glmnet(as.formula("months_survived >= 36 ~ edad + sexo + IMC_baseline + onset + NfL_baseline + CRP_baseline + IL6_baseline"), data = ELA, family = "binomial")
library(glmnet)
formula <- as.formula("months_survived >= 36 ~ edad + sexo + IMC_baseline + onset + NfL_baseline + CRP_baseline + IL6_baseline")
modelo <- glm(formula, data = datos, family = "binomial")
library(glmnet)
formula <- as.formula("months_survived >= 36 ~ edad + sexo + IMC_baseline + onset + NfL_baseline + CRP_baseline + IL6_baseline")
modelo <- glm(formula, data = ELA, family = "binomial")
library(glmnet)
formula <- as.formula("months_survived >= 36 ~ age + sex + IMC_baseline + onset + NfL_baseline + CRP_baseline + IL6_baseline")
modelo <- glm(formula, data = ELA, family = "binomial")
library(glmnet)
formula <- as.formula("months_survived >= 36 ~ age + sex + BMI_baseline + onset + NfL_baseline + CRP_baseline + IL6_baseline")
modelo <- glm(formula, data = ELA, family = "binomial")
library(glmnet)
variables <- as.formula("months_survived >= 36 ~ age + sex + BMI_baseline + onset + NfL_baseline + CRP_baseline + IL6_baseline")
reg_log <- glm(formula, data = ELA, family = "binomial")
library(glmnet)
variables <- as.formula("months_survived >= 36 ~ age + sex + BMI_baseline + onset + NfL_baseline + CRP_baseline + IL6_baseline")
reg_log <- glm(formula, data = ELA, family = "binomial")
summary(reg_log)
nuevas_variables <- as.formula("months_survived >= 36 ~ age + sex + BMI_baseline + onset + NfL_baseline + CRP_baseline")
nueva_reg_log <- glm(formula, data = ELA, family = "binomial")
summary(nueva_reg_log)
nuevas_variables <- as.formula("months_survived >= 36 ~ age + sex + BMI_baseline + onset + NfL_baseline + CRP_baseline")
nueva_reg_log <- glm(nuevas_variables, data = ELA, family = "binomial")
summary(nueva_reg_log)
library(glmnet)
variables <- as.formula("months_survived >= 36 ~ age + sex + BMI_baseline + onset + NfL_baseline + CRP_baseline + IL6_baseline")
reg_log <- glm(variables, data = ELA, family = "binomial")
summary(reg_log)
logL_completo <- logLik(nueva_reg_log)
valor_nulo <- as.formula("months_survived >= 36 ~ 1")
modelo_nulo <- glm(formula_nulo, data = ELA, family = "binomial")
valor_nulo <- as.formula("months_survived >= 36 ~ 1")
modelo_nulo <- glm(valor_nulo, data = ELA, family = "binomial")
logL_nulo <- logLik(modelo_nulo)
R2McFadden <- 1 - (log_likelihood_completo / log_likelihood_nulo)
R2McFadden <- 1 - (logL_completo / logL_nulo)
R2McFadden
library(caret)
install.packages("caret")
library(caret)
library(caret)
ValCohor2 <- ELA[ELA$cohort == "ValCohort2", ]
prediccion <- predict(nueva_reg_log, newdata = )
View(ValCohor2)
View(ValCohor2)
library(caret)
ValCohor2 <- ELA[ELA$cohort == "ValCohort2", ]
prediccion <- predict(nueva_reg_log, newdata = ValCohor2, type = "response")
library(caret)
ValCohor2 <- ELA[ELA$cohort == "ValCohort2", ]
prediccion <- predict(nueva_reg_log, newdata = ValCohor2, type = "response")
prediccion
library(caret)
ValCohor2 <- ELA[ELA$cohort == "ValCohort2", ]
prediccion <- predict(nueva_reg_log, newdata = ValCohor2, type = "response")
may_36_VC2 <- ValCohor2$months_survived >= 36
predicciones <- ifelse(predicciones >= 0.5, 1, 0)
may_36_VC2 <- ValCohor2$months_survived >= 36
predicciones <- ifelse(prediccion >= 0.5, 1, 0)
matriz_confu <- confusionMatrix(table(predicciones, may_36_VC2))
library(caret)
ValCohor2 <- ELA[ELA$cohort == "ValCohort2", ]
prediccion <- predict(nueva_reg_log, newdata = ValCohor2, type = "response")
may_36_VC2 <- ValCohor2$months_survived >= 36
predicciones <- ifelse(prediccion >= 0.5, 1, 0)
matriz_confu <- confusionMatrix(table(predicciones, may_36_VC2))
library(caret)
ValCohort2 <- ELA[ELA$cohort == "ValCohort2", ]
prediccion <- predict(nueva_reg_log, newdata = ValCohort2, type = "response")
predicciones <- ifelse(prediccion >= 0.5, 1, 0)
may_36_VC2 <- ValCohort2$months_survived >= 36
obser <- ifelse(may_36_VC2, 1, 0)
matriz_confu <- confusionMatrix(table(predicciones, obser))
predicciones <- ifelse(prediccion >= 0.5, 1, 0)
may_36_VC2 <- ValCohort2$months_survived >= 36
obser <- ifelse(may_36_VC2, 1, 0)
matriz_confu <- confusionMatrix(table(predicciones, obser))
matriz_confu
save.image("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202324-2/Regresión, modelos y métodos/PACs/PAC2/PAC2.RData")
install.packages("Seurat")
y()
library(Seurat)
GSM <- read.csv("C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Datos/Single-cell analysis reveals transcriptomic remodellings in distinct cell types that contribute to human prostate cancer progression/data.matrix.txt")
View(GSM)
View(GSM)
ruta <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/Prácticas extracurriculares/CSIC-CIC/Datos/Single-cell analysis reveals transcriptomic remodellings in distinct cell types that contribute to human prostate cancer progression/data.matrix.txt"
GSM <- read.table(ruta, header = TRUE, sep = "\t", row.names = 1)
harmony <- readRDS
library(Seurat)
harmony <- readRDS ("Descargas/harmony_seurat.rds")
harmony <- readRDS ("Descargas/harmony_seurat.rds")
harmony <- readRDS ("C://Descargas/harmony_seurat.rds")
harmony <- readRDS ("C:\Usuarios\silvi\Descargas\harmony_seurat.rds")
harmony <- readRDS ("C:\Usuarios\silvi\Descargas\harmony_seurat.rds")
harmony <- readRDS ("C:/Usuarios/silvi/Descargas/harmony_seurat.rds")
harmony <- readRDS ("C:/Usuarios/silvi/Descargas/harmony_seurat.rds")
harmony <- readRDS ("C:/Usuarios/silvi/Descargas/harmony_seurat.rds")
harmony <- readRDS ("/Descargas/harmony_seurat.rds")
harmony <- readRDS ("Descargas/harmony_seurat.rds")
harmony_seurat <- read.table("C:/Users/silvi/Downloads/harmony_seurat.rds", header=TRUE, quote="\"")
View(harmony_seurat)
harmony <- readRDS ("Descargas/harmony_seurat.rds")
which git
git --version
which git
git --version
library(usethis)
install.packages("usethis")
library(usethis)
edit_git_config()
library(usethis)
usethis::edit_git_config()
if (!require("BiocManager", quietly = TRUE))
if (!require("BiocManager", quietly = TRUE)) install.packages("BiocManager")
library(BiocManager)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
R.home()
filter_microarray <- function(allTargets, seed = 123) {
# Configurar la semilla aleatoria
set.seed(seed)
# Filtrar las filas donde 'time' no sea 'hour 2'
filtered <- subset(allTargets, time != "hour 2")
# Dividir el dataset por grupos únicos de 'infection' + 'agent'
filtered$group <- interaction(filtered$infection, filtered$agent)
# Seleccionar 4 muestras al azar de cada grupo
selected <- do.call(rbind, lapply(split(filtered, filtered$group), function(group_data) {
if (nrow(group_data) > 4) {
group_data[sample(1:nrow(group_data), 4), ]
} else {
group_data
}
}))
# Obtener los índices originales como nombres de las filas seleccionadas
original_indices <- match(selected$sample, allTargets$sample)
# Modificar los rownames usando 'sample' y los índices originales
rownames(selected) <- paste0(selected$sample, ".", original_indices)
# Eliminar la columna 'group' y devolver el resultado
selected$group <- NULL
return(selected)
}
# Simular el dataset basado en la descripción proporcionada
allTargets <- data.frame(
sample = c("GSM944831", "GSM944838", "GSM944845", "GSM944852", "GSM944859",
"GSM944833", "GSM944840", "GSM944847", "GSM944854", "GSM944861",
"GSM944834", "GSM944841", "GSM944848", "GSM944855", "GSM944862",
"GSM944832", "GSM944839", "GSM944846", "GSM944853", "GSM944860",
"GSM944835", "GSM944842", "GSM944849", "GSM944856", "GSM944863",
"GSM944836", "GSM944843", "GSM944850", "GSM944857", "GSM944864",
"GSM944837", "GSM944844", "GSM944851", "GSM944858", "GSM944865"),
infection = c(rep("uninfected", 15), rep("S. aureus USA300", 20)),
time = c(rep("hour 0", 15), rep("hour 2", 5), rep("hour 24", 15)),
agent = c(rep("untreated", 5), rep("linezolid", 5), rep("vancomycin", 5),
rep("untreated", 5), rep("untreated", 5), rep("linezolid", 5), rep("vancomycin", 5))
)
# Aplicar la función (cambiar 123 por vuestro ID de la UOC u otro número que podáis escribir en el documento)
result <- filter_microarray(allTargets, seed=53635628)
library(affy)
# Indicar la ruta donde están las muestras
ruta <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202425-1/Anàlisi de dates òmiques/PACS/PAC2/Muestras CEL"
# Listar los archivos en la carpeta
muestras <- list.files(ruta, pattern = "\\.CEL$", full.names = FALSE)
nombres <- sub("_.*", "", muestras)
# Comparar con las muestras seleccionadas
muestras_sel <- result$sample
muestras_compar <- nombres[nombres %in% muestras_sel]
# Verificar si faltan archivos
missing_samples <- setdiff(muestras_sel, nombres)
if (length(missing_samples) > 0) {
print("Faltan las siguientes muestras:")
print(missing_samples)
} else {
print("Todas las muestras se encuentran disponibles.")
}
# Cambiar al directorio donde están los archivos .CEL
setwd(ruta)
# Leer los archivos seleccionados
rawData <- ReadAffy(filenames = muestras_compar)
filter_microarray <- function(allTargets, seed = 123) {
# Configurar la semilla aleatoria
set.seed(seed)
# Filtrar las filas donde 'time' no sea 'hour 2'
filtered <- subset(allTargets, time != "hour 2")
# Dividir el dataset por grupos únicos de 'infection' + 'agent'
filtered$group <- interaction(filtered$infection, filtered$agent)
# Seleccionar 4 muestras al azar de cada grupo
selected <- do.call(rbind, lapply(split(filtered, filtered$group), function(group_data) {
if (nrow(group_data) > 4) {
group_data[sample(1:nrow(group_data), 4), ]
} else {
group_data
}
}))
# Obtener los índices originales como nombres de las filas seleccionadas
original_indices <- match(selected$sample, allTargets$sample)
# Modificar los rownames usando 'sample' y los índices originales
rownames(selected) <- paste0(selected$sample, ".", original_indices)
# Eliminar la columna 'group' y devolver el resultado
selected$group <- NULL
return(selected)
}
# Simular el dataset basado en la descripción proporcionada
allTargets <- data.frame(
sample = c("GSM944831", "GSM944838", "GSM944845", "GSM944852", "GSM944859",
"GSM944833", "GSM944840", "GSM944847", "GSM944854", "GSM944861",
"GSM944834", "GSM944841", "GSM944848", "GSM944855", "GSM944862",
"GSM944832", "GSM944839", "GSM944846", "GSM944853", "GSM944860",
"GSM944835", "GSM944842", "GSM944849", "GSM944856", "GSM944863",
"GSM944836", "GSM944843", "GSM944850", "GSM944857", "GSM944864",
"GSM944837", "GSM944844", "GSM944851", "GSM944858", "GSM944865"),
infection = c(rep("uninfected", 15), rep("S. aureus USA300", 20)),
time = c(rep("hour 0", 15), rep("hour 2", 5), rep("hour 24", 15)),
agent = c(rep("untreated", 5), rep("linezolid", 5), rep("vancomycin", 5),
rep("untreated", 5), rep("untreated", 5), rep("linezolid", 5), rep("vancomycin", 5))
)
# Aplicar la función (cambiar 123 por vuestro ID de la UOC u otro número que podáis escribir en el documento)
result <- filter_microarray(allTargets, seed=53635628)
library(affy)
# Indicar la ruta donde están las muestras
ruta <- "C:/Users/silvi/Desktop/MSc Bioinformática y Bioestadística/202425-1/Anàlisi de dates òmiques/PACS/PAC2/Muestras CEL"
# Listar los archivos en la carpeta
muestras <- list.files(ruta, pattern = "\\.CEL$", full.names = FALSE)
nombres <- sub("_.*", "", muestras)
# Comparar con las muestras seleccionadas
muestras_sel <- result$sample
muestras_compar <- nombres[nombres %in% muestras_sel]
# Verificar si faltan archivos
missing_samples <- setdiff(muestras_sel, nombres)
if (length(missing_samples) > 0) {
print("Faltan las siguientes muestras:")
print(missing_samples)
} else {
print("Todas las muestras se encuentran disponibles.")
}
# Cambiar al directorio donde están los archivos .CEL
setwd(ruta)
# Leer los archivos seleccionados
rawData <- ReadAffy(filenames = muestras_compar)
